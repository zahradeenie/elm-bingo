var _user$project$Bingo$viewScore = function (sum) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('score'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$span,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('label'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Score'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('value'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(sum)),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Bingo$sumMarkedPoints = function (entries) {
	return _elm_lang$core$List$sum(
		A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.points;
			},
			A2(
				_elm_lang$core$List$filter,
				function (_) {
					return _.marked;
				},
				entries)));
};
var _user$project$Bingo$viewFooter = A2(
	_elm_lang$html$Html$footer,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$href('https://github.com/zahradeenie'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Made by Zahra'),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	});
var _user$project$Bingo$viewHeader = function (title) {
	return A2(
		_elm_lang$html$Html$header,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(title),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Bingo$playerInfo = F2(
	function (name, gameNumber) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			name,
			A2(
				_elm_lang$core$Basics_ops['++'],
				' - Game #',
				_elm_lang$core$Basics$toString(gameNumber)));
	});
var _user$project$Bingo$viewPlayer = F2(
	function (name, gameNumber) {
		var playerInfoText = _elm_lang$html$Html$text(
			_elm_lang$core$String$toUpper(
				A2(_user$project$Bingo$playerInfo, name, gameNumber)));
		return A2(
			_elm_lang$html$Html$h2,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('info'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('classy'),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: playerInfoText,
				_1: {ctor: '[]'}
			});
	});
var _user$project$Bingo$postUrl = 'http://localhost:3000/scores';
var _user$project$Bingo$entriesUrl = 'http://localhost:3000/random-entries';
var _user$project$Bingo$encodeScore = function (model) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'name',
				_1: _elm_lang$core$Json_Encode$string(model.name)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'score',
					_1: _elm_lang$core$Json_Encode$int(
						_user$project$Bingo$sumMarkedPoints(model.entries))
				},
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Bingo$initialModel = {
	name: 'Zahra',
	gameNumber: 1,
	entries: {ctor: '[]'},
	alertMessage: _elm_lang$core$Maybe$Nothing
};
var _user$project$Bingo$Model = F4(
	function (a, b, c, d) {
		return {name: a, gameNumber: b, entries: c, alertMessage: d};
	});
var _user$project$Bingo$Entry = F4(
	function (a, b, c, d) {
		return {id: a, phrase: b, points: c, marked: d};
	});
var _user$project$Bingo$entryDecoder = A5(
	_elm_lang$core$Json_Decode$map4,
	_user$project$Bingo$Entry,
	A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'phrase', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'points', _elm_lang$core$Json_Decode$int),
	_elm_lang$core$Json_Decode$succeed(false));
var _user$project$Bingo$Score = F3(
	function (a, b, c) {
		return {id: a, name: b, score: c};
	});
var _user$project$Bingo$scoreDecoder = A4(
	_elm_lang$core$Json_Decode$map3,
	_user$project$Bingo$Score,
	A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'name', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'score', _elm_lang$core$Json_Decode$int));
var _user$project$Bingo$NewScore = function (a) {
	return {ctor: 'NewScore', _0: a};
};
var _user$project$Bingo$postScore = function (model) {
	var body = _elm_lang$http$Http$jsonBody(
		_user$project$Bingo$encodeScore(model));
	var request = A3(_elm_lang$http$Http$post, _user$project$Bingo$postUrl, body, _user$project$Bingo$scoreDecoder);
	return A2(_elm_lang$http$Http$send, _user$project$Bingo$NewScore, request);
};
var _user$project$Bingo$ShareScore = {ctor: 'ShareScore'};
var _user$project$Bingo$CloseAlert = {ctor: 'CloseAlert'};
var _user$project$Bingo$viewAlertMessage = function (alertMessage) {
	var _p0 = alertMessage;
	if (_p0.ctor === 'Just') {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('alert'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('close'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Bingo$CloseAlert),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('x'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(_p0._0),
					_1: {ctor: '[]'}
				}
			});
	} else {
		return _elm_lang$html$Html$text('');
	}
};
var _user$project$Bingo$NewEntries = function (a) {
	return {ctor: 'NewEntries', _0: a};
};
var _user$project$Bingo$getEntries = A2(
	_elm_lang$http$Http$send,
	_user$project$Bingo$NewEntries,
	A2(
		_elm_lang$http$Http$get,
		_user$project$Bingo$entriesUrl,
		_elm_lang$core$Json_Decode$list(_user$project$Bingo$entryDecoder)));
var _user$project$Bingo$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'NewGame':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{gameNumber: model.gameNumber + 1}),
					_1: _user$project$Bingo$getEntries
				};
			case 'Mark':
				var markEntry = function (e) {
					return _elm_lang$core$Native_Utils.eq(e.id, _p1._0) ? _elm_lang$core$Native_Utils.update(
						e,
						{marked: !e.marked}) : e;
				};
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							entries: A2(_elm_lang$core$List$map, markEntry, model.entries)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Sort':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							entries: A2(
								_elm_lang$core$List$sortBy,
								function (_) {
									return _.points;
								},
								model.entries)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'NewEntries':
				if (_p1._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{entries: _p1._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p3 = _p1._0._0;
					var errorMessage = function () {
						var _p2 = _p3;
						switch (_p2.ctor) {
							case 'NetworkError':
								return 'Server is not running';
							case 'BadStatus':
								return _elm_lang$core$Basics$toString(_p2._0.status);
							case 'BadPayload':
								return A2(_elm_lang$core$Basics_ops['++'], 'Decoding failed: ', _p2._0);
							default:
								return _elm_lang$core$Basics$toString(_p3);
						}
					}();
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								alertMessage: _elm_lang$core$Maybe$Just(errorMessage)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'CloseAlert':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{alertMessage: _elm_lang$core$Maybe$Nothing}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ShareScore':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Bingo$postScore(model)
				};
			default:
				if (_p1._0.ctor === 'Ok') {
					var message = A2(
						_elm_lang$core$Basics_ops['++'],
						'Your score of ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p1._0._0.score),
							' was successfully shared'));
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								alertMessage: _elm_lang$core$Maybe$Just(message)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var message = A2(
						_elm_lang$core$Basics_ops['++'],
						'Error posting your score: ',
						_elm_lang$core$Basics$toString(_p1._0._0));
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								alertMessage: _elm_lang$core$Maybe$Just(message)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _user$project$Bingo$Sort = {ctor: 'Sort'};
var _user$project$Bingo$Mark = function (a) {
	return {ctor: 'Mark', _0: a};
};
var _user$project$Bingo$viewEntryItem = function (entry) {
	return A2(
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$classList(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'marked', _1: entry.marked},
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					_user$project$Bingo$Mark(entry.id)),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$span,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('phrase'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(entry.phrase),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('points'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(entry.points)),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Bingo$viewEntryList = function (entries) {
	var listOfEntries = A2(_elm_lang$core$List$map, _user$project$Bingo$viewEntryItem, entries);
	return A2(
		_elm_lang$html$Html$ul,
		{ctor: '[]'},
		listOfEntries);
};
var _user$project$Bingo$NewGame = {ctor: 'NewGame'};
var _user$project$Bingo$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('content'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _user$project$Bingo$viewHeader('Buzzword Bingo'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Bingo$viewPlayer, model.name, model.gameNumber),
				_1: {
					ctor: '::',
					_0: _user$project$Bingo$viewAlertMessage(model.alertMessage),
					_1: {
						ctor: '::',
						_0: _user$project$Bingo$viewEntryList(model.entries),
						_1: {
							ctor: '::',
							_0: _user$project$Bingo$viewScore(
								_user$project$Bingo$sumMarkedPoints(model.entries)),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('button-group'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$button,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_user$project$Bingo$NewGame),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('New Game'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$button,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(_user$project$Bingo$ShareScore),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Share Score'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$button,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_user$project$Bingo$Sort),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Sort'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('debug'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(model)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _user$project$Bingo$viewFooter,
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Bingo$main = _elm_lang$html$Html$program(
	{
		init: {ctor: '_Tuple2', _0: _user$project$Bingo$initialModel, _1: _user$project$Bingo$getEntries},
		view: _user$project$Bingo$view,
		update: _user$project$Bingo$update,
		subscriptions: function (_p4) {
			return _elm_lang$core$Platform_Sub$none;
		}
	})();
